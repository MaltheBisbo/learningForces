import numpy as np


class gaussComparator():
    def __init__(self, featureMat=None, **kwargs):
        self.featureMat = featureMat
        if 'sigma' in kwargs:
            self.sigma = kwargs['sigma']

    def set_args(self, **kwargs):
        if 'sigma' in kwargs:
            self.sigma = kwargs['sigma']
    
    def get_similarity_matrix(self, featureMat=None):
        if featureMat is not None:
            self.featureMat = featureMat
        else:
            print("You need to supply a feature matrix")

        self.similarityMat = np.array([[self.single_comparison(f1, f2, self.sigma)
                                        for f2 in self.featureMat]
                                       for f1 in self.featureMat])
        return self.similarityMat

    def get_similarity_vector(self, fnew):

        self.similarityVec = np.array([self.single_comparison(fnew, f, self.sigma)
                                       for f in self.featureMat])
        return self.similarityVec

    def single_comparison(self, feature1, feature2, sigma):
        d = np.linalg.norm(feature2 - feature1)
        return np.exp(-1/(2*sigma**2)*d)
